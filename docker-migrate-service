#!/usr/bin/env python

import tool.args_parser
import logging
import sys
import connect.connection
import server.rpc_server_thread
import server.rpc_service
import signal

def fin(foo, bar):
	global stop_fd
	logging.info("Stop by %d", foo)
	stop_fd.close()

#Start with Parse Args
args = tool.args_parser.docker_migrate_service_parse()

#log configuration
logging.basicConfig(filename=args.log_file,filemode="a",level=logging.INFO,
    format="%(asctime)s.%(msecs)03d: %(process)d: %(message)s",
    datefmt="%H:%M:%S")

#Setup hook to log uncaught exception
sys.excepthook = tool.util.log_uncaught_exception
tool.util.log_header()
logging.info("Starting docker migrate service!")

#Establish connection and server thread
connection = connect.connection.establish(args.fdmem,args.fdrpc,args.fdfs) 
thread_srv = server.rpc_server_thread.rpc_server_daemon(server.rpc_service.rpc_migrate_service,connection)

#Setup stop handlers we can send stop signal by stop_fd to server thread
stop_fd = thread_srv.init_stop_fd()
signal.signal(signal.SIGTERM, fin)
signal.signal(signal.SIGINT, fin)

#start server thread and wait for signal
thread_srv.start()
signal.pause()
thread_srv.join()
logging.info("Server is done! Bye!")

#close connection
connection.close()

